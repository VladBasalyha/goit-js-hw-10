{"mappings":"gBAKAA,EAAe,CAAE,iBALjB,SAAuBC,GACrB,OAAMC,MAAM,uCAA4CC,OAALF,IAAQG,MAAK,SAAAC,GAChE,OAAOA,EAASC,YCClB,ICgByBC,EAAOC,EAAUC,EACzCC,EDfKC,EAAO,CACZC,UAAWC,SAASC,cAAc,eAClCC,YAAaF,SAASC,cAAc,iBACpCE,YAAaH,SAASC,cAAc,kBAElBG,EAA6BN,EAA7BI,YAA6BJ,EAAxCC,UAEEM,iBAAiB,SCOFX,EDhBF,ICgBSC,EDLhC,SAAuBW,GACtB,OAAOnB,EAAI,eAAcmB,EAAIC,OAAOC,OAAOjB,MAAK,SAACkB,G,OAKlD,SAA+BA,GAC9B,IAAMC,EAASD,EACbE,KAAI,SAAAC,GACJ,MAAO,uDAGwBtB,OADlBsB,EAAQC,MAAMC,IAAI,wEACsBxB,OAAtBsB,EAAQxB,KAAK2B,SAAS,2BAGrDC,KAAK,IACPZ,EAAYa,UAAYP,EAdvBQ,CAAsBT,OCIvBZ,GAA4BD,GAAW,IAA/BuB,QCGM,SAAUzB,EAAOC,EAAUC,GAKrCA,IAMAwB,EANAxB,KAAW,GAJfyB,EAAAC,EACCC,kBADD,IAAAF,KAAAG,EAAAF,EAECG,iBAFD,IAAAD,KAAAE,EAAAJ,EAGCK,oBAHD,IAAAD,OAGgBE,EAHhBF,EAWIG,GAAY,EAGZC,EAAW,EAGf,SAASC,IACJX,GACHY,aAAaZ,GAgBf,SAASa,IAAuB,QAAAC,EAAAC,UAAAC,OAAZC,EAAY,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAZF,EAAYE,GAAAJ,UAAAI,GAC3BC,MAAOC,KACPC,EAAUC,KAAKC,MAAQd,EAO3B,SAASe,IACRf,EAAWa,KAAKC,MAChBjD,EAASmD,MAAMN,EAAMH,GAOtB,SAASU,IACR3B,OAAYQ,EAfTC,IAkBCJ,IAAaE,GAAiBP,GAMlCyB,IAGDd,SAEqBH,IAAjBD,GAA8Be,EAAUhD,EACvC+B,GAMHK,EAAWa,KAAKC,MACXrB,IACJH,EAAY4B,WAAWrB,EAAeoB,EAAQF,EAAMnD,KAOrDmD,KAEwB,IAAftB,IAYVH,EAAY4B,WACXrB,EAAeoB,EAAQF,OACNjB,IAAjBD,EAA6BjC,EAAQgD,EAAUhD,KAQlD,OAHAuC,EAAQgB,OAjFCA,SAAOrD,GACkBA,IAAjCsD,GAAiCtD,GAAW,IAApCuD,oBAAR,IAAAD,KACAnB,IACAF,GAAasB,GAiFPlB,ED/GAmB,CAAS1D,EAAOC,EAAU,CAAEgC,cAA0B,UAD7D,IAAA9B,U","sources":["src/js/fetchCountries.js","src/index.js","node_modules/throttle-debounce/debounce.js","node_modules/throttle-debounce/throttle.js"],"sourcesContent":["function fetchСountries(name) {\n\treturn fetch(`https://restcountries.com/v3.1/name/${name}`).then(response => {\n\t\treturn response.json();\n\t});\n}\nexport default { fetchСountries };\n","import './css/styles.css';\nimport API from './js/fetchCountries';\nimport { debounce } from 'throttle-debounce';\nconst DEBOUNCE_DELAY = 300;\n\nconst refs = {\n\tinputText: document.querySelector('#search-box'),\n\tcountryList: document.querySelector('.country-list'),\n\tcountryInfo: document.querySelector('.country-info'),\n};\nconst { inputText, countryList, countryInfo } = refs;\n\ninputText.addEventListener('input', debounce(DEBOUNCE_DELAY, onSearchInput));\n\nfunction onSearchInput(evt) {\n\treturn API.fetchСountries(evt.target.value).then(countries =>\n\t\tcreateCountriesMarkup(countries)\n\t);\n}\n\nfunction createCountriesMarkup(countries) {\n\tconst markup = countries\n\t\t.map(country => {\n\t\t\treturn `\n\t\t\t<li class = country-item>\n\t\t\t<img src = ${country.flags.svg} width = 40 height = 30> </img>\n\t\t\t<span class = \"country-name\">${country.name.official}</span>\n\t\t\t</li>`;\n\t\t})\n\t\t.join('');\n\tcountryList.innerHTML = markup;\n}\n","/* eslint-disable no-undefined */\n\nimport throttle from './throttle.js';\n\n/**\n * Debounce execution of a function. Debouncing, unlike throttling,\n * guarantees that a function is only executed a single time, either at the\n * very beginning of a series of calls, or at the very end.\n *\n * @param {number} delay -               A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher) are most useful.\n * @param {Function} callback -          A function to be executed after delay milliseconds. The `this` context and all arguments are passed through, as-is,\n *                                        to `callback` when the debounced-function is executed.\n * @param {object} [options] -           An object to configure options.\n * @param {boolean} [options.atBegin] -  Optional, defaults to false. If atBegin is false or unspecified, callback will only be executed `delay` milliseconds\n *                                        after the last debounced-function call. If atBegin is true, callback will be executed only at the first debounced-function call.\n *                                        (After the throttled-function has not been called for `delay` milliseconds, the internal counter is reset).\n *\n * @returns {Function} A new, debounced function.\n */\nexport default function (delay, callback, options) {\n\tconst { atBegin = false } = options || {};\n\treturn throttle(delay, callback, { debounceMode: atBegin !== false });\n}\n","/* eslint-disable no-undefined,no-param-reassign,no-shadow */\n\n/**\n * Throttle execution of a function. Especially useful for rate limiting\n * execution of handlers on events like resize and scroll.\n *\n * @param {number} delay -                  A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher)\n *                                            are most useful.\n * @param {Function} callback -               A function to be executed after delay milliseconds. The `this` context and all arguments are passed through,\n *                                            as-is, to `callback` when the throttled-function is executed.\n * @param {object} [options] -              An object to configure options.\n * @param {boolean} [options.noTrailing] -   Optional, defaults to false. If noTrailing is true, callback will only execute every `delay` milliseconds\n *                                            while the throttled-function is being called. If noTrailing is false or unspecified, callback will be executed\n *                                            one final time after the last throttled-function call. (After the throttled-function has not been called for\n *                                            `delay` milliseconds, the internal counter is reset).\n * @param {boolean} [options.noLeading] -   Optional, defaults to false. If noLeading is false, the first throttled-function call will execute callback\n *                                            immediately. If noLeading is true, the first the callback execution will be skipped. It should be noted that\n *                                            callback will never executed if both noLeading = true and noTrailing = true.\n * @param {boolean} [options.debounceMode] - If `debounceMode` is true (at begin), schedule `clear` to execute after `delay` ms. If `debounceMode` is\n *                                            false (at end), schedule `callback` to execute after `delay` ms.\n *\n * @returns {Function} A new, throttled, function.\n */\nexport default function (delay, callback, options) {\n\tconst {\n\t\tnoTrailing = false,\n\t\tnoLeading = false,\n\t\tdebounceMode = undefined\n\t} = options || {};\n\t/*\n\t * After wrapper has stopped being called, this timeout ensures that\n\t * `callback` is executed at the proper times in `throttle` and `end`\n\t * debounce modes.\n\t */\n\tlet timeoutID;\n\tlet cancelled = false;\n\n\t// Keep track of the last time `callback` was executed.\n\tlet lastExec = 0;\n\n\t// Function to clear existing timeout\n\tfunction clearExistingTimeout() {\n\t\tif (timeoutID) {\n\t\t\tclearTimeout(timeoutID);\n\t\t}\n\t}\n\n\t// Function to cancel next exec\n\tfunction cancel(options) {\n\t\tconst { upcomingOnly = false } = options || {};\n\t\tclearExistingTimeout();\n\t\tcancelled = !upcomingOnly;\n\t}\n\n\t/*\n\t * The `wrapper` function encapsulates all of the throttling / debouncing\n\t * functionality and when executed will limit the rate at which `callback`\n\t * is executed.\n\t */\n\tfunction wrapper(...arguments_) {\n\t\tlet self = this;\n\t\tlet elapsed = Date.now() - lastExec;\n\n\t\tif (cancelled) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Execute `callback` and update the `lastExec` timestamp.\n\t\tfunction exec() {\n\t\t\tlastExec = Date.now();\n\t\t\tcallback.apply(self, arguments_);\n\t\t}\n\n\t\t/*\n\t\t * If `debounceMode` is true (at begin) this is used to clear the flag\n\t\t * to allow future `callback` executions.\n\t\t */\n\t\tfunction clear() {\n\t\t\ttimeoutID = undefined;\n\t\t}\n\n\t\tif (!noLeading && debounceMode && !timeoutID) {\n\t\t\t/*\n\t\t\t * Since `wrapper` is being called for the first time and\n\t\t\t * `debounceMode` is true (at begin), execute `callback`\n\t\t\t * and noLeading != true.\n\t\t\t */\n\t\t\texec();\n\t\t}\n\n\t\tclearExistingTimeout();\n\n\t\tif (debounceMode === undefined && elapsed > delay) {\n\t\t\tif (noLeading) {\n\t\t\t\t/*\n\t\t\t\t * In throttle mode with noLeading, if `delay` time has\n\t\t\t\t * been exceeded, update `lastExec` and schedule `callback`\n\t\t\t\t * to execute after `delay` ms.\n\t\t\t\t */\n\t\t\t\tlastExec = Date.now();\n\t\t\t\tif (!noTrailing) {\n\t\t\t\t\ttimeoutID = setTimeout(debounceMode ? clear : exec, delay);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t/*\n\t\t\t\t * In throttle mode without noLeading, if `delay` time has been exceeded, execute\n\t\t\t\t * `callback`.\n\t\t\t\t */\n\t\t\t\texec();\n\t\t\t}\n\t\t} else if (noTrailing !== true) {\n\t\t\t/*\n\t\t\t * In trailing throttle mode, since `delay` time has not been\n\t\t\t * exceeded, schedule `callback` to execute `delay` ms after most\n\t\t\t * recent execution.\n\t\t\t *\n\t\t\t * If `debounceMode` is true (at begin), schedule `clear` to execute\n\t\t\t * after `delay` ms.\n\t\t\t *\n\t\t\t * If `debounceMode` is false (at end), schedule `callback` to\n\t\t\t * execute after `delay` ms.\n\t\t\t */\n\t\t\ttimeoutID = setTimeout(\n\t\t\t\tdebounceMode ? clear : exec,\n\t\t\t\tdebounceMode === undefined ? delay - elapsed : delay\n\t\t\t);\n\t\t}\n\t}\n\n\twrapper.cancel = cancel;\n\n\t// Return the wrapper function.\n\treturn wrapper;\n}\n"],"names":["$57dba802a44d0066$export$2e2bcd8739ae039","name","fetch","concat","then","response","json","delay","callback","options","_ref$atBegin","$b8f9b7833fa37166$var$refs","inputText","document","querySelector","countryList","countryInfo","$b8f9b7833fa37166$var$countryList","addEventListener","evt","target","value","countries","markup","map","country","flags","svg","official","join","innerHTML","$b8f9b7833fa37166$var$createCountriesMarkup","atBegin","timeoutID","_ref$noTrailing","_ref","noTrailing","_ref$noLeading","noLeading","_ref$debounceMode","debounceMode","undefined","cancelled","lastExec","clearExistingTimeout","clearTimeout","wrapper","_len","arguments","length","arguments_","Array","_key","self","this","elapsed","Date","now","exec","apply","clear","setTimeout","cancel","_ref2$upcomingOnly","upcomingOnly","throttle"],"version":3,"file":"index.bca89b27.js.map"}